name: Global Dynamo Table
run-name: Global Dynamo Table

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
      
  build_and_deploy:
    name: Building and deploying
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./architeture2/global_dynamo_db
    steps:
      - name: Check out repo's default branch
        uses: actions/checkout@v3

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - run: |
          terraform init
          terraform plan
          terraform apply --auto-approve

      - uses: actions/upload-artifact@v3
        with:
          name: tfstate
          path: architeture2/global_dynamo_db/terraform.tfstate
          if-no-files-found: error           

      - run: |
          sleep 5s
          terraform destroy --auto-approve
        if: ${{ failure() || cancelled() }}

  db_test:
    needs: [build_and_deploy]
    name: Testing dynamo table
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./architeture2/global_dynamo_db
    steps:
      - name: Check out repo's default branch
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'   

      - uses: actions/download-artifact@v3
        with:
          name: tfstate
          path: architeture2/global_dynamo_db

      - name: Install dependencies
        run: pip install -r ./tests/requirements.txt  

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - run: python -m pytest tests/main.py -s
        env:
          dynamo_table_name: 'Clients'

      - run: |
          terraform init
          terraform destroy --auto-approve
        if: ${{ failure() || cancelled() }}