name: Deploying lambda function
run-name: Deploying lambda function

on:
  push:
    branches:
      - "main"
  workflow_dispatch:

jobs:
  # code:
  #   name: Obtaining the code
  #   runs-on: ubuntu-latest

  unit_test:
    name: Testing function
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./architeture2
    steps:
      - name: Check out repo's default branch
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'   

      - name: Install dependencies
        run: pip install -r ./tests/requirements.txt  

      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - run: python -m pytest tests/unit -v
      
  build_and_deploy:
    needs: [unit_test]
    name: Building and deploying
    runs-on: ubuntu-latest
    env:
      TF_VAR_default_name: Salvattore
    defaults:
      run:
        working-directory: ./architeture2
    outputs:
      api_url: ${{ steps.get_api_url.outputs.api_url }}
    steps:
      - name: Check out repo's default branch
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'

      - uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - run: bash ../.github/scripts/py_build.sh $GITHUB_WORKSPACE/architeture2/lambda_function $GITHUB_WORKSPACE/architeture2/build hello_function.zip Function   
      - run: terraform init
      - run: terraform plan -var="TF_VAR_default_name=$TF_VAR_default_name"
      - run: terraform apply -auto-approve

      - run: terraform destroy -auto-approve
        if: ${{ failure() || cancelled() }}

      - id: get_api_url
        run: |
          api_url=$(terraform output -raw api_url)
          echo $api_url
          echo "api_url=$api_url" >> $GITHUB_OUTPUT

  integration_test:
    needs: [build_and_deploy]
    name: Testing api
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./architeture2
    steps:
      - name: Check out repo's default branch
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'   

      - name: Install dependencies
        run: pip install -r ./tests/requirements.txt  

      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - run: python -m pytest tests/integration -v
        env:
          AWS_SAM_STACK_NAME: testing-gha
          API_URL: ${{ needs.build_and_deploy.outputs.api_url }}